{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red63\green127\blue95;\red0\green0\blue192;
\red106\green62\blue62;\red42\green0\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c0\c0\c75294;
\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c16471\c0\c100000;}
\margl1440\margr1440\vieww19140\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 public\cf0  \cf2 class\cf0  LinkedListWithoutDummy \{\
	\cf2 private\cf0  \cf2 class\cf0  Node \{ \cf3 //inner class\cf0 \
		\cf2 private\cf0  Object \cf4 data\cf0 ;\
		\cf2 private\cf0  Node \cf4 next\cf0 ;\
		\
		\cf2 private\cf0  Node(Object \cf5 data\cf0 , Node \cf5 next\cf0 ) \{\
			\cf2 this\cf0 .\cf4 data\cf0  = \cf5 data\cf0 ;\
			\cf2 this\cf0 .\cf4 next\cf0  = \cf5 next\cf0 ;\
		\}\
		\cf3 //second constructor\cf0 \
		\cf2 private\cf0  Node(Object \cf5 data\cf0 )\{\
			\cf2 this\cf0 (\cf5 data\cf0 , \cf2 null\cf0 ); \cf3 //correct way to call an existing constructor\cf0 \
		\}\
	\}\cf3 //end of Node class\cf0 \
	\
	\cf2 private\cf0  Node \cf4 head\cf0 ;\
	\cf2 private\cf0  \cf2 int\cf0  \cf4 size\cf0 ;\
	\
	\cf2 public\cf0  LinkedListWithoutDummy() \{\cf3 //create an empty linked list\cf0 \
		\cf2 this\cf0 .\cf4 head\cf0  = \cf2 null\cf0 ;\
		\cf2 this\cf0 .\cf4 size\cf0  = 0;\
	\}\
	\
	\cf2 public\cf0  \cf2 void\cf0  bar() \{\
		Node \cf5 cur\cf0  = \cf2 null\cf0 ; \cf3 //cause no problem anywhere.\cf0 \
		System.\cf4 out\cf0 .println(\cf5 \ul \ulc5 cur\cf0 \ulnone .\cf4 data\cf0 ); \cf3 //cur.data means that you like to access the data member inside cur.\cf0 \
		\cf3 //YOu cannot access a member inside a null object. This gives you null-pointer exception.\cf0 \
		System.\cf4 out\cf0 .println(\cf6 "we are here!"\cf0 );\
	\}\
	\
	\cf2 public\cf0  \cf2 void\cf0  addFirst(Object \cf5 data\cf0 ) \{ \cf3 // whether works for an empty list? Works\cf0 \
		\cf2 this\cf0 .\cf4 head\cf0  = \cf2 new\cf0  Node(\cf5 data\cf0 , \cf2 this\cf0 .\cf4 head\cf0 );\
		\cf2 this\cf0 .\cf4 size\cf0  ++;\
	\}\
	\
	\cf2 public\cf0  Object remove(\cf2 int\cf0  \cf5 index\cf0 ) \cf2 throws\cf0  IllegalArgumentException \{\
		\cf3 //we always assume the worst\cf0 \
		\cf2 if\cf0 (\cf5 index\cf0  < 0 || \cf5 index\cf0  >= \cf2 this\cf0 .\cf4 size\cf0 )\
			\cf2 throw\cf0  \cf2 new\cf0  IllegalArgumentException(\cf6 "wrong index value!"\cf0 );\
		\
		\cf2 if\cf0 (\cf5 index\cf0  == 0) \{\
			Object \cf5 temp\cf0  = \cf2 this\cf0 .\cf4 head\cf0 .\cf4 data\cf0 ;\
			\cf2 this\cf0 .\cf4 head\cf0  = \cf2 this\cf0 .\cf4 head\cf0 .\cf4 next\cf0 ;\
			\cf2 this\cf0 .\cf4 size\cf0  --;\
			\cf2 return\cf0  \cf5 temp\cf0 ;\
		\}\
		\
		Node \cf5 cur\cf0  = \cf2 this\cf0 .\cf4 head\cf0 , \cf5 prev\cf0 = \cf2 null\cf0 ;\
		\cf2 int\cf0  \cf5 i\cf0  = 0;\
		\cf2 while\cf0 (\cf5 i\cf0  < \cf5 index\cf0 ) \{\
			\cf5 prev\cf0  = \cf5 cur\cf0 ;\
			\cf5 cur\cf0  = \cf5 cur\cf0 .\cf4 next\cf0 ;\
			\cf5 i\cf0 ++;\
		\}\cf3 //walk into the list and find the node at the index you passed in.\cf0 \
		\
		\cf3 //cut out\cf0 \
		\cf5 prev\cf0 .\cf4 next\cf0  = \cf5 cur\cf0 .\cf4 next\cf0 ;\
		\cf2 this\cf0 .\cf4 size\cf0  --;\
		\cf2 return\cf0  \cf5 cur\cf0 .\cf4 data\cf0 ;\
	\}\
	\
	\cf2 public\cf0  \cf2 static\cf0  \cf2 void\cf0  main() \{\
		LinkedListWithoutDummy \cf5 mylist\cf0  = \cf2 new\cf0  LinkedListWithoutDummy();\cf3 //cause no null pointer exception this line.\cf0 \
		\cf5 mylist\cf0 .bar();\
	\}\
\
\}\
}